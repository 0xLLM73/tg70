-- Cabal.Ventures Telegram Bot Database Schema
-- This schema defines the core tables needed for the bot functionality

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Role enum for user permissions
CREATE TYPE role AS ENUM ('siteAdmin', 'communityAdmin', 'user');

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    telegram_id BIGINT UNIQUE,
    email VARCHAR(320) UNIQUE,
    username VARCHAR(32),
    first_name VARCHAR(64),
    last_name VARCHAR(64),
    is_bot BOOLEAN DEFAULT FALSE,
    language_code VARCHAR(10),
    is_premium BOOLEAN DEFAULT FALSE,
    role role NOT NULL DEFAULT 'user',
    last_login_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id);
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email) WHERE email IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_users_username ON users(username) WHERE username IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);
CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);

-- Update trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Enable Row Level Security on users table
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- RLS Policies for users table
CREATE POLICY "Self or Admin Read" ON users
    FOR SELECT USING (
        id = auth.uid() OR 
        role = 'siteAdmin' OR
        telegram_id IS NOT NULL AND telegram_id = (
            SELECT telegram_id FROM users WHERE id = auth.uid()
        )
    );

CREATE POLICY "Self or Admin Update" ON users
    FOR UPDATE USING (
        id = auth.uid() OR 
        role = 'siteAdmin'
    );

CREATE POLICY "Service Role All Access" ON users
    FOR ALL USING (
        current_setting('role') = 'service_role'
    );

-- Audit events table for tracking auth activities
CREATE TABLE IF NOT EXISTS auth_events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL,
    telegram_id BIGINT,
    event TEXT NOT NULL CHECK (event IN ('login', 'link', 'unlink', 'role_change')),
    ip INET,
    user_agent TEXT,
    metadata JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Index for auth_events
CREATE INDEX IF NOT EXISTS idx_auth_events_user_id ON auth_events(user_id);
CREATE INDEX IF NOT EXISTS idx_auth_events_telegram_id ON auth_events(telegram_id);
CREATE INDEX IF NOT EXISTS idx_auth_events_event ON auth_events(event);
CREATE INDEX IF NOT EXISTS idx_auth_events_created_at ON auth_events(created_at);

-- Enable RLS on auth_events
ALTER TABLE auth_events ENABLE ROW LEVEL SECURITY;

-- RLS Policies for auth_events table
CREATE POLICY "Own Events or Admin Read" ON auth_events
    FOR SELECT USING (
        user_id = auth.uid() OR 
        EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role = 'siteAdmin')
    );

CREATE POLICY "Service Role All Access Events" ON auth_events
    FOR ALL USING (
        current_setting('role') = 'service_role'
    );

-- Comments for documentation
COMMENT ON TABLE users IS 'Telegram users who have interacted with the bot';
COMMENT ON COLUMN users.telegram_id IS 'Unique Telegram user ID (nullable for email-only users)';
COMMENT ON COLUMN users.email IS 'User email for magic link authentication';
COMMENT ON COLUMN users.username IS 'Telegram username (without @)';
COMMENT ON COLUMN users.first_name IS 'User first name from Telegram';
COMMENT ON COLUMN users.last_name IS 'User last name from Telegram';
COMMENT ON COLUMN users.is_bot IS 'Whether this user is a bot';
COMMENT ON COLUMN users.language_code IS 'User language code from Telegram';
COMMENT ON COLUMN users.is_premium IS 'Whether user has Telegram Premium';
COMMENT ON COLUMN users.role IS 'User role for access control';
COMMENT ON COLUMN users.last_login_at IS 'Timestamp of last successful login/link';
COMMENT ON COLUMN users.created_at IS 'When user first interacted with bot';
COMMENT ON COLUMN users.updated_at IS 'When user record was last updated';

COMMENT ON TABLE auth_events IS 'Audit log for authentication and authorization events';
COMMENT ON COLUMN auth_events.user_id IS 'Reference to users.id';
COMMENT ON COLUMN auth_events.telegram_id IS 'Telegram ID for correlation';
COMMENT ON COLUMN auth_events.event IS 'Type of auth event (login, link, unlink, role_change)';
COMMENT ON COLUMN auth_events.ip IS 'IP address of the request';
COMMENT ON COLUMN auth_events.user_agent IS 'User agent string';
COMMENT ON COLUMN auth_events.metadata IS 'Additional event metadata as JSON';
COMMENT ON COLUMN auth_events.created_at IS 'When the event occurred';